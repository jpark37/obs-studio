#include "color.effect"

uniform float4x4 ViewProj;
uniform texture2d image;
uniform float multiplier;

sampler_state def_sampler {
	Filter   = Linear;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VertInOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertInOut VSDefault(VertInOut vert_in)
{
	VertInOut vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = vert_in.uv;
	return vert_out;
}

float4 PSDrawBare(VertInOut vert_in) : TARGET
{
	return image.Sample(def_sampler, vert_in.uv);
}

float4 PSDrawAlphaDivide(VertInOut vert_in) : TARGET
{
	float4 rgba = image.Sample(def_sampler, vert_in.uv);
	rgba.rgb *= (rgba.a > 0.) ? (1. / rgba.a) : 0.;
	return rgba;
}

float4 PSDrawAlphaDivideTonemap(VertInOut vert_in) : TARGET
{
	float4 rgba = image.Sample(def_sampler, vert_in.uv);
	rgba.rgb *= (rgba.a > 0.) ? (1. / rgba.a) : 0.;
	rgba.rgb = rec709_to_rec2020(rgba.rgb);
	rgba.rgb = reinhard(rgba.rgb);
	rgba.rgb = rec2020_to_rec709(rgba.rgb);
	return rgba;
}

float3 ProcessAlphaDividePQ(float4 rgba)
{
	rgba.rgb *= (rgba.a > 0.) ? (multiplier / rgba.a) : 0.;
	rgba.rgb = rec709_to_rec2020(rgba.rgb);
	rgba.rgb = linear_to_st2084(rgba.rgb);
	return rgba.rgb;
}

float4 PSDrawAlphaDivideR10L(VertInOut vert_in) : TARGET
{
	float4 rgba = image.Sample(def_sampler, vert_in.uv);
	rgba.rgb = ProcessAlphaDividePQ(rgba);
	uint3 rgb1023 = uint3(mad(rgba.rgb, 876., 64.5));
	uint b = (rgb1023.b & 0x3Fu) << 2;
	uint g = ((rgb1023.b & 0x3C0u) >> 6) | ((rgb1023.g & 0xFu) << 4);
	uint r = ((rgb1023.g & 0x3F0u) >> 4) | ((rgb1023.r & 0x3u) << 6);
	uint a = ((rgb1023.r & 0x3FCu) >> 2);
	return float4(uint4(r, g, b, a)) / 255.;
}


float4 PSDrawAlphaDivideR12L(VertInOut vert_in) : TARGET
{
	int x = vert_in.pos.x;
	int x0 = x - ((x + 8) / 9);
	int x1 = x0 + 1;
	int y = vert_in.pos.y;
	float4 rgba0 = image.Load(int3(x0, y, 0));
	float4 rgba1 = image.Load(int3(x1, y, 0));
	rgba0.rgb = ProcessAlphaDividePQ(rgba0);
	rgba1.rgb = ProcessAlphaDividePQ(rgba1);
	uint3 rgb0 = uint3(mad(rgba0.rgb, 4095., .5));
	uint3 rgb1 = uint3(mad(rgba1.rgb, 4095., .5));
	int index = x % 9;
	int pattern = x % 3;
	uint channel0;
	uint channel1;
	uint channel2;
	uint channel3;
	uint b;
	uint g;
	uint r;
	uint a;
	if (pattern == 0)
	{
		if (index == 0)
		{
			channel0 = rgb0.r;
			channel1 = rgb0.g;
			channel2 = rgb0.b;
		}
		else if (index == 3)
		{
			channel0 = rgb0.b;
			channel1 = rgb1.r;
			channel2 = rgb1.g;
		}
		else
		{
			channel0 = rgb0.g;
			channel1 = rgb0.b;
			channel2 = rgb1.r;
		}
		b = channel0 & 0xff;
		g = (channel0 & 0xf00) >> 8 | ((channel1 & 0xf) << 4);
		b = (channel1 & 0xff0) >> 4;
		a = channel2 & 0xff;
	}
	else if (pattern == 1)
	{
		if (index == 1)
		{
			channel0 = rgb0.b;
			channel1 = rgb1.r;
			channel2 = rgb1.g;
			channel3 = rgb1.b;
		}
		else if (index == 4)
		{
			channel0 = rgb0.g;
			channel1 = rgb0.b;
			channel2 = rgb1.r;
			channel3 = rgb1.g;
		}
		else
		{
			channel0 = rgb0.r;
			channel1 = rgb0.g;
			channel2 = rgb0.b;
			channel3 = rgb1.r;
		}
		b = (channel0 & 0xf00) >> 8 | ((channel1 & 0xf) << 4);
		g = (channel1 & 0xff0) >> 4;
		r = channel2 & 0xff;
		a = (channel2 & 0xf00) >> 8 | ((channel3 & 0xf) << 4);
	}
	else
	{
		if (index == 2)
		{
			channel0 = rgb0.b;
			channel1 = rgb1.r;
			channel2 = rgb1.g;
		}
		else if (index == 5)
		{
			channel0 = rgb0.g;
			channel1 = rgb0.b;
			channel2 = rgb1.r;
		}
		else
		{
			channel0 = rgb0.r;
			channel1 = rgb0.g;
			channel2 = rgb0.b;
		}
		b = (channel0 & 0xff0) >> 4;
		g = channel1 & 0xff;
		r = (channel1 & 0xf00) >> 8 | ((channel2 & 0xf) << 4);
		a = (channel2 & 0xff0) >> 4;
	}
	return float4(uint4(r, g, b, a)) / 255.;
}

float4 PSDrawNonlinearAlpha(VertInOut vert_in) : TARGET
{
	float4 rgba = image.Sample(def_sampler, vert_in.uv);
	rgba.rgb = srgb_linear_to_nonlinear(rgba.rgb);
	rgba.rgb *= rgba.a;
	rgba.rgb = srgb_nonlinear_to_linear(rgba.rgb);
	return rgba;
}

float4 PSDrawNonlinearAlphaMultiply(VertInOut vert_in) : TARGET
{
	float4 rgba = image.Sample(def_sampler, vert_in.uv);
	rgba.rgb = srgb_linear_to_nonlinear(rgba.rgb);
	rgba.rgb *= rgba.a;
	rgba.rgb = srgb_nonlinear_to_linear(rgba.rgb);
	rgba.rgb *= multiplier;
	return rgba;
}

float4 PSDrawSrgbDecompress(VertInOut vert_in) : TARGET
{
	float4 rgba = image.Sample(def_sampler, vert_in.uv);
	rgba.rgb = srgb_nonlinear_to_linear(rgba.rgb);
	return rgba;
}

float4 PSDrawSrgbDecompressMultiply(VertInOut vert_in) : TARGET
{
	float4 rgba = image.Sample(def_sampler, vert_in.uv);
	rgba.rgb = srgb_nonlinear_to_linear(rgba.rgb);
	rgba.rgb *= multiplier;
	return rgba;
}

float4 PSDrawMultiply(VertInOut vert_in) : TARGET
{
	float4 rgba = image.Sample(def_sampler, vert_in.uv);
	rgba.rgb *= multiplier;
	return rgba;
}

float4 PSDrawTonemap(VertInOut vert_in) : TARGET
{
	float4 rgba = image.Sample(def_sampler, vert_in.uv);
	rgba.rgb = rec709_to_rec2020(rgba.rgb);
	rgba.rgb = reinhard(rgba.rgb);
	rgba.rgb = rec2020_to_rec709(rgba.rgb);
	return rgba;
}

float4 PSDrawMultiplyTonemap(VertInOut vert_in) : TARGET
{
	float4 rgba = image.Sample(def_sampler, vert_in.uv);
	rgba.rgb *= multiplier;
	rgba.rgb = rec709_to_rec2020(rgba.rgb);
	rgba.rgb = reinhard(rgba.rgb);
	rgba.rgb = rec2020_to_rec709(rgba.rgb);
	return rgba;
}

float4 PSDrawPQ(VertInOut vert_in) : TARGET
{
	float4 rgba = image.Sample(def_sampler, vert_in.uv);
	rgba.rgb = st2084_to_linear(rgba.rgb) * multiplier;
	rgba.rgb = rec2020_to_rec709(rgba.rgb);
	return rgba;
}

float4 PSDrawTonemapPQ(VertInOut vert_in) : TARGET
{
	float4 rgba = image.Sample(def_sampler, vert_in.uv);
	rgba.rgb = st2084_to_linear(rgba.rgb) * multiplier;
	rgba.rgb = reinhard(rgba.rgb);
	rgba.rgb = rec2020_to_rec709(rgba.rgb);
	return rgba;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawBare(vert_in);
	}
}

technique DrawAlphaDivide
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawAlphaDivide(vert_in);
	}
}

technique DrawAlphaDivideTonemap
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawAlphaDivideTonemap(vert_in);
	}
}

technique DrawAlphaDivideR10L
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawAlphaDivideR10L(vert_in);
	}
}

technique DrawAlphaDivideR12L
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawAlphaDivideR12L(vert_in);
	}
}

technique DrawNonlinearAlpha
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawNonlinearAlpha(vert_in);
	}
}

technique DrawNonlinearAlphaMultiply
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawNonlinearAlphaMultiply(vert_in);
	}
}

technique DrawSrgbDecompress
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawSrgbDecompress(vert_in);
	}
}

technique DrawSrgbDecompressMultiply
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawSrgbDecompressMultiply(vert_in);
	}
}

technique DrawMultiply
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawMultiply(vert_in);
	}
}

technique DrawTonemap
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawTonemap(vert_in);
	}
}

technique DrawMultiplyTonemap
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawMultiplyTonemap(vert_in);
	}
}

technique DrawPQ
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawPQ(vert_in);
	}
}

technique DrawTonemapPQ
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawTonemapPQ(vert_in);
	}
}
